
load('icemask_composite.mat')
always_ice = imfill(all(ice(:,:,year<=2018),3),8,'holes'); % Take the mean ice mask over the observed period. Taking the sum is faster than mean.  
clear ice year

fn = '/Users/cgreene/Documents/MATLAB/DEM_generation/extruded_antarctica_2021-09-02.h5'; 
H0 = permute(h5read(fn,'/thickness'),[2 1]); 

[X,Y] = meshgrid(x,y); 

ground = ismember(bedmachine_interp('mask',X,Y),[1 2 4]);
bed = bedmachine_interp('bed',X,Y); 

yrtmp = floor(h5read('FULL_CUBE_v4.h5','/t')); 
xf = h5read('FULL_CUBE_v4.h5','/x');
yf = h5read('FULL_CUBE_v4.h5','/y');
[Xf,Yf] = meshgrid(xf,yf); 

Htmp = permute(h5read('FULL_CUBE_v4.h5','/H_filt10'),[3 2 1]); 

polehole = interp2(xf,yf,sum(diff(Htmp,[],3)==0,3),X,Y,'nearest')>75;

%% Convert Fernando's data to annual averages

year = unique(yrtmp); 

dH = NaN(size(Xf,1),size(Xf,2),numel(year)); 
for k = 1:numel(year)
   ind = yrtmp == year(k); 
   dH(:,:,k) = mean(Htmp(:,:,ind),3,'omitnan'); 
end

dH = dH - dH(:,:,year==2014);

clear Htmp yrtmp

%% Fill edges of Fernando's data 

dst2data_km = 3*bwdist(all(isfinite(dH),3));

for k = 1:size(dH,3)
   tmp = dH(:,:,k); 
   
   % Constrain regionfill by setting dH anomalies more than 100 km from data to 0.  
   tmp(dst2data_km>100) = 0; 
   
   % Fill the gap: 
   tmp = regionfill(tmp,isnan(tmp)); 
   
   dH(:,:,k) = tmp; 
   
end

%% Maximum thickness w/o grounding

% Calculate the maximum thickness that could exist at neutral buoyancy 
% (no new grounding). If hydrostatic factor thickness2freeboard(1)=0.1071, then H_max = bed/(0.1071-1) = 1.1199*bed.   
Hmax = -1.12*bed; 

% Subtract a meter as a safety margin to make sure the ice base doesn't skim the bottom: 
Hmax = Hmax - 1; 

%% Create thickness cube for 1992-2018

H = zeros(size(X,1),size(X,2),length(year),'uint16');

for k = 1:length(year)
   tmp = H0 + interp2(xf,yf,dH(:,:,k),X,Y); 
   
   % Prevent any new grounding: 
   tmp(tmp>Hmax & ~ground & always_ice) = Hmax(tmp>Hmax & ~ground & always_ice); 
   
   % Make sure no holes cropped up: 
   tmp(tmp<1 & ~ground & always_ice) = 1; 
   
   % Set "ocean" to NaN: 
   tmp(~always_ice & ~ground) = 32767; 
   
   % Make sure grounded ice remains unchanged: 
   tmp(ground) = H0(ground); 
   
   % Store this year's thickness: 
   H(:,:,k) = uint16(tmp); 
   k
end

readme = 'ice shelf thickness time series, taken from F. Paolos FULL_CUBE_v4.5, but tied to our adjusted BedMachine dataset. This data was generated by iceshelf_thickness_cube_generator.m';

% save('/Users/cgreene/Documents/MATLAB/DEM_generation/iceshelf_thickness_cube_1992-2018.mat','x','y','H','ground','always_ice','year','readme','-v7.3')

%% Calculate elevation trend

% The trend for the whole record: 
H2 = cube2rect(H,always_ice & ~ground & ~polehole ); 
H_tr = rect2cube(trend(double(H2),1),always_ice & ~ground & ~polehole); 

% The trend for the pole hole (only the CryoSat-2 period) 
H2 = cube2rect(H(:,:,year>=2010),polehole); 
H_tr2 = rect2cube(trend(double(H2),1),polehole); 

% Merge the two solutions: 
H_tr(polehole) = H_tr2(polehole); 

clear H2 H_tr2

%%

future_years = 0:2:50; 
H_start = H(:,:,end); % from last time 
H = zeros(size(X,1),size(X,2),numel(future_years),'uint16');

H(:,:,1) = H_start; 

H_start = double(H_start); 

for k = 2:numel(future_years) 
   
   tmp = H_start + H_tr*future_years(k); 
   % Prevent any new grounding: 
   tmp(tmp>Hmax & ~ground & always_ice) = Hmax(tmp>Hmax & ~ground & always_ice); 
   
   % Make sure no holes cropped up: 
   tmp(tmp<1 & ~ground & always_ice) = 1; 
   
   % Set "ocean" to NaN: 
   tmp(~always_ice & ~ground) = 32767; 
   
   % Make sure grounded ice remains unchanged: 
   tmp(ground) = H0(ground); 
   
   % Store this year's thickness: 
   H(:,:,k) = uint16(tmp); 
   k
end

readme = 'ice shelf thickness time series for the next 50 years, extrapolating 1992-2018 trends from F. Paolos FULL_CUBE_v4.5 50 years into the future. This data was generated by iceshelf_thickness_cube_generator.m';
% save('/Users/cgreene/Documents/MATLAB/DEM_generation/iceshelf_thickness_cube_future.mat','x','y','H','ground','always_ice','future_years','readme','-v7.3')

